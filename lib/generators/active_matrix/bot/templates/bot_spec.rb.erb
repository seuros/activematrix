# frozen_string_literal: true

require 'rails_helper'

RSpec.describe <%= class_name %>Bot do
  let(:agent) do
    MatrixAgent.create!(
      name: '<%= file_name %>_test',
      homeserver: 'https://matrix.example.com',
      username: 'test_bot',
      password: 'password',
      bot_class: '<%= class_name %>Bot'
    )
  end
  
  let(:client) { instance_double(ActiveMatrix::Client) }
  let(:room) { instance_double(ActiveMatrix::Room) }
  let(:bot) { described_class.new(agent) }
  
  before do
    allow(agent).to receive(:client).and_return(client)
    allow(client).to receive(:mxid).and_return('@test_bot:example.com')
    allow(bot).to receive(:room).and_return(room)
  end
  
  <% if commands.any? %>
  <% commands.each do |command| %>
  describe '#<%= command %>' do
    it 'responds to the <%= command %> command' do
      expect(room).to receive(:send_notice).twice
      bot.send(:<%= command %>)
    end
  end
  
  <% end %>
  <% else %>
  describe '#hello' do
    it 'responds with a greeting' do
      expect(room).to receive(:send_notice).with('Hello there!')
      bot.hello
    end
    
    it 'greets by name when provided' do
      expect(room).to receive(:send_notice).with('Hello, Alice!')
      bot.hello('Alice')
    end
  end
  <% end %>
  
  describe 'inter-agent communication' do
    let(:other_bot) { instance_double(ActiveMatrix::Bot::MultiInstanceBase, agent_name: 'other_bot') }
    
    it 'responds to ping messages' do
      expect(bot).to receive(:send_to_agent).with('other_bot', hash_including(type: 'pong'))
      bot.receive_message({ type: 'ping' }, from: other_bot)
    end
  end
  
  describe 'memory access' do
    it 'has access to agent memory' do
      expect(bot.memory).to be_a(ActiveMatrix::Memory::AgentMemory)
    end
    
    it 'has access to global memory' do
      expect(bot.global_memory).to be_a(ActiveMatrix::Memory::GlobalMemory)
    end
  end
end